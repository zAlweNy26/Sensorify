// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum BatteryCharge {
  none,
  ac,
  usb,
  wireless,
}

enum BatteryHealth {
  unknown,
  good,
  overHeat,
  overVoltage,
  cold,
  dead,
}

enum BatteryState {
  unknown,
  notCharging,
  discharging,
  charging,
  full,
}

class Battery {
  Battery({
    required this.currentLevel,
    required this.realCurrentLevel,
    required this.currentCapacity,
    required this.totalCapacity,
    required this.voltage,
    required this.amperage,
    required this.temperature,
    required this.wattage,
    required this.technology,
    required this.chargeMode,
    required this.health,
    required this.state,
  });

  int currentLevel;

  int realCurrentLevel;

  int currentCapacity;

  int totalCapacity;

  int voltage;

  int amperage;

  double temperature;

  double wattage;

  String technology;

  BatteryCharge chargeMode;

  BatteryHealth health;

  BatteryState state;

  Object encode() {
    return <Object?>[
      currentLevel,
      realCurrentLevel,
      currentCapacity,
      totalCapacity,
      voltage,
      amperage,
      temperature,
      wattage,
      technology,
      chargeMode.index,
      health.index,
      state.index,
    ];
  }

  static Battery decode(Object result) {
    result as List<Object?>;
    return Battery(
      currentLevel: result[0]! as int,
      realCurrentLevel: result[1]! as int,
      currentCapacity: result[2]! as int,
      totalCapacity: result[3]! as int,
      voltage: result[4]! as int,
      amperage: result[5]! as int,
      temperature: result[6]! as double,
      wattage: result[7]! as double,
      technology: result[8]! as String,
      chargeMode: BatteryCharge.values[result[9]! as int],
      health: BatteryHealth.values[result[10]! as int],
      state: BatteryState.values[result[11]! as int],
    );
  }
}

class System {
  System({
    required this.androidVersion,
    required this.sdkVersion,
  });

  String androidVersion;

  int sdkVersion;

  Object encode() {
    return <Object?>[
      androidVersion,
      sdkVersion,
    ];
  }

  static System decode(Object result) {
    result as List<Object?>;
    return System(
      androidVersion: result[0]! as String,
      sdkVersion: result[1]! as int,
    );
  }
}

class _SensorsApiCodec extends StandardMessageCodec {
  const _SensorsApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Battery) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is System) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Battery.decode(readValue(buffer)!);
      case 129: 
        return System.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SensorsApi {
  /// Constructor for [SensorsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SensorsApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _SensorsApiCodec();

  Future<Battery> getBattery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SensorsApi.getBattery', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Battery?)!;
    }
  }

  Future<System> getSystemInfo() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SensorsApi.getSystemInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as System?)!;
    }
  }
}

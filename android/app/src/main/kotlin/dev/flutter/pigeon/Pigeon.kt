// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class BatteryCharge(val raw: Int) {
  NONE(0),
  AC(1),
  USB(2),
  WIRELESS(3);

  companion object {
    fun ofRaw(raw: Int): BatteryCharge? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BatteryHealth(val raw: Int) {
  UNKNOWN(0),
  GOOD(1),
  OVERHEAT(2),
  OVERVOLTAGE(3),
  COLD(4),
  DEAD(5);

  companion object {
    fun ofRaw(raw: Int): BatteryHealth? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BatteryState(val raw: Int) {
  UNKNOWN(0),
  NOTCHARGING(1),
  DISCHARGING(2),
  CHARGING(3),
  FULL(4);

  companion object {
    fun ofRaw(raw: Int): BatteryState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Battery (
  val currentLevel: Long,
  val realCurrentLevel: Long,
  val currentCapacity: Long,
  val totalCapacity: Long,
  val voltage: Long,
  val amperage: Long,
  val temperature: Double,
  val wattage: Double,
  val technology: String,
  val chargeMode: BatteryCharge,
  val health: BatteryHealth,
  val state: BatteryState

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Battery {
      val currentLevel = list[0].let { if (it is Int) it.toLong() else it as Long }
      val realCurrentLevel = list[1].let { if (it is Int) it.toLong() else it as Long }
      val currentCapacity = list[2].let { if (it is Int) it.toLong() else it as Long }
      val totalCapacity = list[3].let { if (it is Int) it.toLong() else it as Long }
      val voltage = list[4].let { if (it is Int) it.toLong() else it as Long }
      val amperage = list[5].let { if (it is Int) it.toLong() else it as Long }
      val temperature = list[6] as Double
      val wattage = list[7] as Double
      val technology = list[8] as String
      val chargeMode = BatteryCharge.ofRaw(list[9] as Int)!!
      val health = BatteryHealth.ofRaw(list[10] as Int)!!
      val state = BatteryState.ofRaw(list[11] as Int)!!
      return Battery(currentLevel, realCurrentLevel, currentCapacity, totalCapacity, voltage, amperage, temperature, wattage, technology, chargeMode, health, state)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      currentLevel,
      realCurrentLevel,
      currentCapacity,
      totalCapacity,
      voltage,
      amperage,
      temperature,
      wattage,
      technology,
      chargeMode.raw,
      health.raw,
      state.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class System (
  val androidVersion: String,
  val sdkVersion: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): System {
      val androidVersion = list[0] as String
      val sdkVersion = list[1].let { if (it is Int) it.toLong() else it as Long }
      return System(androidVersion, sdkVersion)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      androidVersion,
      sdkVersion,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object SensorsApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Battery.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          System.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Battery -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is System -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SensorsApi {
  fun getBattery(): Battery
  fun getSystemInfo(): System

  companion object {
    /** The codec used by SensorsApi. */
    val codec: MessageCodec<Any?> by lazy {
      SensorsApiCodec
    }
    /** Sets up an instance of `SensorsApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SensorsApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.SensorsApi.getBattery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBattery())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.SensorsApi.getSystemInfo", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getSystemInfo())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

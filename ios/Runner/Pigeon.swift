// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum BatteryCharge: Int {
  case none = 0
  case ac = 1
  case usb = 2
  case wireless = 3
}

enum BatteryHealth: Int {
  case unknown = 0
  case good = 1
  case overHeat = 2
  case overVoltage = 3
  case cold = 4
  case dead = 5
}

enum BatteryState: Int {
  case unknown = 0
  case notCharging = 1
  case discharging = 2
  case charging = 3
  case full = 4
}

/// Generated class from Pigeon that represents data sent in messages.
struct Battery {
  var currentLevel: Int64
  var realCurrentLevel: Int64
  var currentCapacity: Int64
  var totalCapacity: Int64
  var voltage: Int64
  var amperage: Int64
  var temperature: Double
  var wattage: Double
  var technology: String
  var chargeMode: BatteryCharge
  var health: BatteryHealth
  var state: BatteryState

  static func fromList(_ list: [Any?]) -> Battery? {
    let currentLevel = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let realCurrentLevel = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let currentCapacity = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let totalCapacity = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)
    let voltage = list[4] is Int64 ? list[4] as! Int64 : Int64(list[4] as! Int32)
    let amperage = list[5] is Int64 ? list[5] as! Int64 : Int64(list[5] as! Int32)
    let temperature = list[6] as! Double
    let wattage = list[7] as! Double
    let technology = list[8] as! String
    let chargeMode = BatteryCharge(rawValue: list[9] as! Int)!
    let health = BatteryHealth(rawValue: list[10] as! Int)!
    let state = BatteryState(rawValue: list[11] as! Int)!

    return Battery(
      currentLevel: currentLevel,
      realCurrentLevel: realCurrentLevel,
      currentCapacity: currentCapacity,
      totalCapacity: totalCapacity,
      voltage: voltage,
      amperage: amperage,
      temperature: temperature,
      wattage: wattage,
      technology: technology,
      chargeMode: chargeMode,
      health: health,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      currentLevel,
      realCurrentLevel,
      currentCapacity,
      totalCapacity,
      voltage,
      amperage,
      temperature,
      wattage,
      technology,
      chargeMode.rawValue,
      health.rawValue,
      state.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct System {
  var androidVersion: String
  var sdkVersion: Int64

  static func fromList(_ list: [Any?]) -> System? {
    let androidVersion = list[0] as! String
    let sdkVersion = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)

    return System(
      androidVersion: androidVersion,
      sdkVersion: sdkVersion
    )
  }
  func toList() -> [Any?] {
    return [
      androidVersion,
      sdkVersion,
    ]
  }
}
private class SensorsApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Battery.fromList(self.readValue() as! [Any?])
      case 129:
        return System.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class SensorsApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Battery {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? System {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SensorsApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SensorsApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SensorsApiCodecWriter(data: data)
  }
}

class SensorsApiCodec: FlutterStandardMessageCodec {
  static let shared = SensorsApiCodec(readerWriter: SensorsApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SensorsApi {
  func getBattery() throws -> Battery
  func getSystemInfo() throws -> System
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SensorsApiSetup {
  /// The codec used by SensorsApi.
  static var codec: FlutterStandardMessageCodec { SensorsApiCodec.shared }
  /// Sets up an instance of `SensorsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SensorsApi?) {
    let getBatteryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SensorsApi.getBattery", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBatteryChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getBattery()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getBatteryChannel.setMessageHandler(nil)
    }
    let getSystemInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SensorsApi.getSystemInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSystemInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getSystemInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSystemInfoChannel.setMessageHandler(nil)
    }
  }
}
